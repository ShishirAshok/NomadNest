{"ast":null,"code":"'use strict';\n\nvar nanoid = require('nanoid').nanoid;\n\n/**\n * Construct a new mapbox event client to send interaction events to the mapbox event service\n * @param {Object} options options with which to create the service\n * @param {String} options.accessToken the mapbox access token to make requests\n * @param {Number} [options.flushInterval=1000] the number of ms after which to flush the event queue\n * @param {Number} [options.maxQueueSize=100] the number of events to queue before flushing\n * @private\n */\nfunction MapboxEventManager(options) {\n  this.origin = options.origin || 'https://api.mapbox.com';\n  this.endpoint = 'events/v2';\n  this.access_token = options.accessToken;\n  this.version = '0.2.0';\n  this.sessionID = this.generateSessionID();\n  this.userAgent = this.getUserAgent();\n  this.options = options;\n  this.send = this.send.bind(this);\n\n  // parse global options to be sent with each request\n  this.countries = options.countries ? options.countries.split(\",\") : null;\n  this.types = options.types ? options.types.split(\",\") : null;\n  this.bbox = options.bbox ? options.bbox : null;\n  this.language = options.language ? options.language.split(\",\") : null;\n  this.limit = options.limit ? +options.limit : null;\n  this.locale = navigator.language || null;\n  this.enableEventLogging = this.shouldEnableLogging(options);\n  this.eventQueue = new Array();\n  this.flushInterval = options.flushInterval || 1000;\n  this.maxQueueSize = options.maxQueueSize || 100;\n  this.timer = this.flushInterval ? setTimeout(this.flush.bind(this), this.flushInterval) : null;\n  // keep some state to deduplicate requests if necessary\n  this.lastSentInput = \"\";\n  this.lastSentIndex = 0;\n}\nMapboxEventManager.prototype = {\n  /**\n     * Send a search.select event to the mapbox events service\n     * This event marks the array index of the item selected by the user out of the array of possible options\n     * @private\n     * @param {Object} selected the geojson feature selected by the user\n     * @param {Object} geocoder a mapbox-gl-geocoder instance\n     * @returns {Promise}\n     */\n  select: function (selected, geocoder) {\n    var resultIndex = this.getSelectedIndex(selected, geocoder);\n    var payload = this.getEventPayload('search.select', geocoder);\n    payload.resultIndex = resultIndex;\n    payload.resultPlaceName = selected.place_name;\n    payload.resultId = selected.id;\n    if (resultIndex === this.lastSentIndex && payload.queryString === this.lastSentInput || resultIndex == -1) {\n      // don't log duplicate events if the user re-selected the same feature on the same search\n      return;\n    }\n    this.lastSentIndex = resultIndex;\n    this.lastSentInput = payload.queryString;\n    if (!payload.queryString) return; // will be rejected\n    return this.push(payload);\n  },\n  /**\n     * Send a search-start event to the mapbox events service\n     * This turnstile event marks when a user starts a new search\n     * @private\n     * @param {Object} geocoder a mapbox-gl-geocoder instance\n     * @returns {Promise}\n     */\n  start: function (geocoder) {\n    var payload = this.getEventPayload('search.start', geocoder);\n    if (!payload.queryString) return; // will be rejected\n    return this.push(payload);\n  },\n  /**\n   * Send a search-keyevent event to the mapbox events service\n   * This event records each keypress in sequence\n   * @private\n   * @param {Object} keyEvent the keydown event to log\n   * @param {Object} geocoder a mapbox-gl-geocoder instance\n   * \n   */\n  keyevent: function (keyEvent, geocoder) {\n    //pass invalid event\n    if (!keyEvent.key) return;\n    // don't send events for keys that don't change the input\n    // TAB, ESC, LEFT, RIGHT, ENTER, UP, DOWN\n    if (keyEvent.metaKey || [9, 27, 37, 39, 13, 38, 40].indexOf(keyEvent.keyCode) !== -1) return;\n    var payload = this.getEventPayload('search.keystroke', geocoder);\n    payload.lastAction = keyEvent.key;\n    if (!payload.queryString) return; // will be rejected\n    return this.push(payload);\n  },\n  /**\n   * Send an event to the events service\n   *\n   * The event is skipped if the instance is not enabled to send logging events\n   *\n   * @private\n   * @param {Object} payload the http POST body of the event\n   * @param {Function} [callback] a callback function to invoke when the send has completed\n   * @returns {Promise}\n   */\n  send: function (payload, callback) {\n    if (!this.enableEventLogging) {\n      if (callback) return callback();\n      return;\n    }\n    var options = this.getRequestOptions(payload);\n    this.request(options, function (err) {\n      if (err) return this.handleError(err, callback);\n      if (callback) {\n        return callback();\n      }\n    }.bind(this));\n  },\n  /**\n   * Get http request options\n   * @private\n   * @param {*} payload\n   */\n  getRequestOptions: function (payload) {\n    if (!Array.isArray(payload)) payload = [payload];\n    var options = {\n      // events must be sent with POST\n      method: \"POST\",\n      host: this.origin,\n      path: this.endpoint + \"?access_token=\" + this.access_token,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload) //events are arrays\n    };\n    return options;\n  },\n  /**\n   * Get the event payload to send to the events service\n   * Most payload properties are shared across all events\n   * @private\n   * @param {String} event the name of the event to send to the events service. Valid options are 'search.start', 'search.select', 'search.feedback'.\n   * @param {Object} geocoder a mapbox-gl-geocoder instance\n   * @returns {Object} an event payload\n   */\n  getEventPayload: function (event, geocoder) {\n    // Handle proximity, whether null, lat/lng coordinate object, or 'ip'\n    var proximity;\n    if (!geocoder.options.proximity) {\n      proximity = null;\n    } else if (typeof geocoder.options.proximity === 'object') {\n      proximity = [geocoder.options.proximity.longitude, geocoder.options.proximity.latitude];\n    } else if (geocoder.options.proximity === 'ip') {\n      proximity = [999, 999]; // Alias for 'ip' in event logs\n    } else {\n      proximity = geocoder.options.proximity;\n    }\n    var zoom = geocoder._map ? geocoder._map.getZoom() : undefined;\n    var payload = {\n      event: event,\n      created: +new Date(),\n      sessionIdentifier: this.sessionID,\n      country: this.countries,\n      userAgent: this.userAgent,\n      language: this.language,\n      bbox: this.bbox,\n      types: this.types,\n      endpoint: 'mapbox.places',\n      autocomplete: geocoder.options.autocomplete,\n      fuzzyMatch: geocoder.options.fuzzyMatch,\n      proximity: proximity,\n      limit: geocoder.options.limit,\n      routing: geocoder.options.routing,\n      worldview: geocoder.options.worldview,\n      mapZoom: zoom,\n      keyboardLocale: this.locale\n    };\n\n    // get the text in the search bar\n    if (event === \"search.select\") {\n      payload.queryString = geocoder.inputString;\n    } else if (event != \"search.select\" && geocoder._inputEl) {\n      payload.queryString = geocoder._inputEl.value;\n    } else {\n      payload.queryString = geocoder.inputString;\n    }\n    return payload;\n  },\n  /**\n   * Wraps the request function for easier testing\n   * Make an http request and invoke a callback\n   * @private\n   * @param {Object} opts options describing the http request to be made\n   * @param {Function} callback the callback to invoke when the http request is completed\n   */\n  request: function (opts, callback) {\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function () {\n      if (this.readyState == 4) {\n        if (this.status == 204) {\n          //success\n          return callback(null);\n        } else {\n          return callback(this.statusText);\n        }\n      }\n    };\n    xhttp.open(opts.method, opts.host + '/' + opts.path, true);\n    for (var header in opts.headers) {\n      var headerValue = opts.headers[header];\n      xhttp.setRequestHeader(header, headerValue);\n    }\n    xhttp.send(opts.body);\n  },\n  /**\n   * Handle an error that occurred while making a request\n   * @param {Object} err an error instance to log\n   * @private\n   */\n  handleError: function (err, callback) {\n    if (callback) return callback(err);\n  },\n  /**\n   * Generate a session ID to be returned with all of the searches made by this geocoder instance\n   * ID is random and cannot be tracked across sessions\n   * @private\n   */\n  generateSessionID: function () {\n    return nanoid();\n  },\n  /**\n   * Get a user agent string to send with the request to the events service\n   * @private\n   */\n  getUserAgent: function () {\n    return 'mapbox-gl-geocoder.' + this.version + \".\" + navigator.userAgent;\n  },\n  /**\n     * Get the 0-based numeric index of the item that the user selected out of the list of options\n     * @private\n     * @param {Object} selected the geojson feature selected by the user\n     * @param {Object} geocoder a Mapbox-GL-Geocoder instance\n     * @returns {Number} the index of the selected result\n     */\n  getSelectedIndex: function (selected, geocoder) {\n    if (!geocoder._typeahead) return;\n    var results = geocoder._typeahead.data;\n    var selectedID = selected.id;\n    var resultIDs = results.map(function (feature) {\n      return feature.id;\n    });\n    var selectedIdx = resultIDs.indexOf(selectedID);\n    return selectedIdx;\n  },\n  /**\n     * Check whether events should be logged\n     * Clients using a localGeocoder or an origin other than mapbox should not have events logged\n     * @private\n     */\n  shouldEnableLogging: function (options) {\n    if (options.enableEventLogging === false) return false;\n    if (options.origin && options.origin !== 'https://api.mapbox.com') return false;\n    // hard to make sense of events when a local instance is suplementing results from origin\n    if (options.localGeocoder) return false;\n    // hard to make sense of events when a custom filter is in use\n    if (options.filter) return false;\n    return true;\n  },\n  /**\n   * Flush out the event queue by sending events to the events service\n   * @private\n   */\n  flush: function () {\n    if (this.eventQueue.length > 0) {\n      this.send(this.eventQueue);\n      this.eventQueue = new Array();\n    }\n    // //reset the timer\n    if (this.timer) clearTimeout(this.timer);\n    if (this.flushInterval) this.timer = setTimeout(this.flush.bind(this), this.flushInterval);\n  },\n  /**\n   * Push event into the pending queue\n   * @param {Object} evt the event to send to the events service\n   * @param {Boolean} forceFlush indicates that the event queue should be flushed after adding this event regardless of size of the queue\n   * @private\n   */\n  push: function (evt, forceFlush) {\n    this.eventQueue.push(evt);\n    if (this.eventQueue.length >= this.maxQueueSize || forceFlush) {\n      this.flush();\n    }\n  },\n  /**\n   * Flush any remaining events from the queue before it is removed\n   * @private\n   */\n  remove: function () {\n    this.flush();\n  }\n};\nmodule.exports = MapboxEventManager;","map":{"version":3,"names":["nanoid","require","MapboxEventManager","options","origin","endpoint","access_token","accessToken","version","sessionID","generateSessionID","userAgent","getUserAgent","send","bind","countries","split","types","bbox","language","limit","locale","navigator","enableEventLogging","shouldEnableLogging","eventQueue","Array","flushInterval","maxQueueSize","timer","setTimeout","flush","lastSentInput","lastSentIndex","prototype","select","selected","geocoder","resultIndex","getSelectedIndex","payload","getEventPayload","resultPlaceName","place_name","resultId","id","queryString","push","start","keyevent","keyEvent","key","metaKey","indexOf","keyCode","lastAction","callback","getRequestOptions","request","err","handleError","isArray","method","host","path","headers","body","JSON","stringify","event","proximity","longitude","latitude","zoom","_map","getZoom","undefined","created","Date","sessionIdentifier","country","autocomplete","fuzzyMatch","routing","worldview","mapZoom","keyboardLocale","inputString","_inputEl","value","opts","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","statusText","open","header","headerValue","setRequestHeader","_typeahead","results","data","selectedID","resultIDs","map","feature","selectedIdx","localGeocoder","filter","length","clearTimeout","evt","forceFlush","remove","module","exports"],"sources":["C:/Users/shish/HostelProject/client/node_modules/@mapbox/mapbox-gl-geocoder/lib/events.js"],"sourcesContent":["'use strict';\nvar nanoid = require('nanoid').nanoid;\n\n/**\n * Construct a new mapbox event client to send interaction events to the mapbox event service\n * @param {Object} options options with which to create the service\n * @param {String} options.accessToken the mapbox access token to make requests\n * @param {Number} [options.flushInterval=1000] the number of ms after which to flush the event queue\n * @param {Number} [options.maxQueueSize=100] the number of events to queue before flushing\n * @private\n */\nfunction MapboxEventManager(options) {\n  this.origin = options.origin || 'https://api.mapbox.com';\n  this.endpoint = 'events/v2';\n  this.access_token = options.accessToken;\n  this.version = '0.2.0'\n  this.sessionID = this.generateSessionID();\n  this.userAgent = this.getUserAgent();\n\n  this.options = options;\n  this.send = this.send.bind(this);\n\n\n  // parse global options to be sent with each request\n  this.countries = (options.countries) ? options.countries.split(\",\") : null;\n  this.types = (options.types) ? options.types.split(\",\") : null;\n  this.bbox = (options.bbox) ? options.bbox : null;\n  this.language = (options.language) ? options.language.split(\",\") : null;\n  this.limit = (options.limit) ? +options.limit : null;\n  this.locale = navigator.language || null;\n  this.enableEventLogging = this.shouldEnableLogging(options);\n  this.eventQueue = new Array();\n  this.flushInterval = options.flushInterval || 1000;\n  this.maxQueueSize = options.maxQueueSize || 100;\n  this.timer = (this.flushInterval) ? setTimeout(this.flush.bind(this), this.flushInterval) : null;\n  // keep some state to deduplicate requests if necessary\n  this.lastSentInput = \"\";\n  this.lastSentIndex = 0;\n}\n\nMapboxEventManager.prototype = {\n  /**\n     * Send a search.select event to the mapbox events service\n     * This event marks the array index of the item selected by the user out of the array of possible options\n     * @private\n     * @param {Object} selected the geojson feature selected by the user\n     * @param {Object} geocoder a mapbox-gl-geocoder instance\n     * @returns {Promise}\n     */\n  select: function(selected, geocoder){\n    var resultIndex = this.getSelectedIndex(selected, geocoder);\n    var payload = this.getEventPayload('search.select', geocoder);\n    payload.resultIndex = resultIndex;\n    payload.resultPlaceName  = selected.place_name;\n    payload.resultId = selected.id;\n    if ((resultIndex === this.lastSentIndex && payload.queryString === this.lastSentInput) || resultIndex == -1) {\n      // don't log duplicate events if the user re-selected the same feature on the same search\n      return;\n    }\n    this.lastSentIndex = resultIndex;\n    this.lastSentInput = payload.queryString;\n    if (!payload.queryString) return; // will be rejected\n    return this.push(payload)\n  },\n\n  /**\n     * Send a search-start event to the mapbox events service\n     * This turnstile event marks when a user starts a new search\n     * @private\n     * @param {Object} geocoder a mapbox-gl-geocoder instance\n     * @returns {Promise}\n     */\n  start: function(geocoder){\n    var payload = this.getEventPayload('search.start', geocoder);\n    if (!payload.queryString) return; // will be rejected\n    return this.push(payload);\n  },\n\n  /**\n   * Send a search-keyevent event to the mapbox events service\n   * This event records each keypress in sequence\n   * @private\n   * @param {Object} keyEvent the keydown event to log\n   * @param {Object} geocoder a mapbox-gl-geocoder instance\n   * \n   */\n  keyevent: function(keyEvent, geocoder){\n\n    //pass invalid event\n    if (!keyEvent.key) return;\n    // don't send events for keys that don't change the input\n    // TAB, ESC, LEFT, RIGHT, ENTER, UP, DOWN\n    if (keyEvent.metaKey || [9, 27, 37, 39, 13, 38, 40].indexOf(keyEvent.keyCode) !== -1) return;\n    var payload = this.getEventPayload('search.keystroke', geocoder);\n    payload.lastAction = keyEvent.key;\n    if (!payload.queryString) return; // will be rejected\n    return this.push(payload);\n  },\n\n  /**\n   * Send an event to the events service\n   *\n   * The event is skipped if the instance is not enabled to send logging events\n   *\n   * @private\n   * @param {Object} payload the http POST body of the event\n   * @param {Function} [callback] a callback function to invoke when the send has completed\n   * @returns {Promise}\n   */\n  send: function (payload, callback) {\n    if (!this.enableEventLogging) {\n      if (callback) return callback();\n      return;\n    }\n    var options = this.getRequestOptions(payload);\n    this.request(options, function(err){\n      if (err) return this.handleError(err, callback);\n      if (callback) {\n        return callback();\n      }\n    }.bind(this))\n  },\n  /**\n   * Get http request options\n   * @private\n   * @param {*} payload\n   */\n  getRequestOptions: function(payload){\n    if (!Array.isArray(payload)) payload = [payload];\n    var options = {\n      // events must be sent with POST\n      method: \"POST\",\n      host: this.origin,\n      path: this.endpoint +  \"?access_token=\" + this.access_token,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body:JSON.stringify(payload) //events are arrays\n    }\n    return options\n  },\n\n  /**\n   * Get the event payload to send to the events service\n   * Most payload properties are shared across all events\n   * @private\n   * @param {String} event the name of the event to send to the events service. Valid options are 'search.start', 'search.select', 'search.feedback'.\n   * @param {Object} geocoder a mapbox-gl-geocoder instance\n   * @returns {Object} an event payload\n   */\n  getEventPayload: function (event, geocoder) {\n    // Handle proximity, whether null, lat/lng coordinate object, or 'ip'\n    var proximity;\n    if (!geocoder.options.proximity) {\n      proximity = null;\n    } else if (typeof geocoder.options.proximity === 'object') {\n      proximity = [geocoder.options.proximity.longitude, geocoder.options.proximity.latitude];\n    } else if (geocoder.options.proximity === 'ip') {\n      proximity = [999,999];  // Alias for 'ip' in event logs\n    } else {\n      proximity = geocoder.options.proximity;\n    }\n\n    var zoom = (geocoder._map) ? geocoder._map.getZoom() : undefined;\n    var payload = {\n      event: event,\n      created: +new Date(),\n      sessionIdentifier: this.sessionID,\n      country: this.countries,\n      userAgent: this.userAgent,\n      language: this.language,\n      bbox: this.bbox,\n      types: this.types,\n      endpoint: 'mapbox.places',\n      autocomplete: geocoder.options.autocomplete,\n      fuzzyMatch: geocoder.options.fuzzyMatch,\n      proximity: proximity,\n      limit: geocoder.options.limit,\n      routing: geocoder.options.routing,\n      worldview: geocoder.options.worldview,\n      mapZoom: zoom,\n      keyboardLocale: this.locale\n    }\n\n    // get the text in the search bar\n    if (event === \"search.select\"){\n      payload.queryString = geocoder.inputString;\n    }else if (event != \"search.select\" && geocoder._inputEl){\n      payload.queryString = geocoder._inputEl.value;\n    }else{\n      payload.queryString = geocoder.inputString;\n    }\n    return payload;\n  },\n\n  /**\n   * Wraps the request function for easier testing\n   * Make an http request and invoke a callback\n   * @private\n   * @param {Object} opts options describing the http request to be made\n   * @param {Function} callback the callback to invoke when the http request is completed\n   */\n  request: function (opts, callback) {\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n      if (this.readyState == 4 ) {\n        if (this.status == 204){\n          //success\n          return callback(null);\n        }else {\n          return callback(this.statusText);\n        }\n      }\n    };\n\n    xhttp.open(opts.method, opts.host + '/' + opts.path, true);\n    for (var header in opts.headers){\n      var headerValue = opts.headers[header];\n      xhttp.setRequestHeader(header, headerValue)\n    }\n    xhttp.send(opts.body);\n  },\n\n  /**\n   * Handle an error that occurred while making a request\n   * @param {Object} err an error instance to log\n   * @private\n   */\n  handleError: function (err, callback) {\n    if (callback) return callback(err);\n  },\n\n  /**\n   * Generate a session ID to be returned with all of the searches made by this geocoder instance\n   * ID is random and cannot be tracked across sessions\n   * @private\n   */\n  generateSessionID: function () {\n    return nanoid();\n  },\n\n  /**\n   * Get a user agent string to send with the request to the events service\n   * @private\n   */\n  getUserAgent: function () {\n    return 'mapbox-gl-geocoder.' + this.version + \".\" + navigator.userAgent;\n  },\n\n  /**\n     * Get the 0-based numeric index of the item that the user selected out of the list of options\n     * @private\n     * @param {Object} selected the geojson feature selected by the user\n     * @param {Object} geocoder a Mapbox-GL-Geocoder instance\n     * @returns {Number} the index of the selected result\n     */\n  getSelectedIndex: function(selected, geocoder){\n    if (!geocoder._typeahead) return;\n    var results = geocoder._typeahead.data;\n    var selectedID = selected.id;\n    var resultIDs = results.map(function (feature) {\n      return feature.id;\n    });\n    var selectedIdx = resultIDs.indexOf(selectedID);\n    return selectedIdx;\n  },\n\n  /**\n     * Check whether events should be logged\n     * Clients using a localGeocoder or an origin other than mapbox should not have events logged\n     * @private\n     */\n  shouldEnableLogging: function(options){\n    if (options.enableEventLogging === false) return false;\n    if (options.origin && options.origin !== 'https://api.mapbox.com') return false;\n    // hard to make sense of events when a local instance is suplementing results from origin\n    if (options.localGeocoder) return false;\n    // hard to make sense of events when a custom filter is in use\n    if (options.filter) return false;\n    return true;\n  },\n\n  /**\n   * Flush out the event queue by sending events to the events service\n   * @private\n   */\n  flush: function(){\n    if (this.eventQueue.length > 0){\n      this.send(this.eventQueue);\n      this.eventQueue = new Array();\n    }\n    // //reset the timer\n    if (this.timer)  clearTimeout(this.timer);\n    if (this.flushInterval) this.timer = setTimeout(this.flush.bind(this), this.flushInterval)\n  },\n\n  /**\n   * Push event into the pending queue\n   * @param {Object} evt the event to send to the events service\n   * @param {Boolean} forceFlush indicates that the event queue should be flushed after adding this event regardless of size of the queue\n   * @private\n   */\n  push: function(evt, forceFlush){\n    this.eventQueue.push(evt);\n    if (this.eventQueue.length >= this.maxQueueSize || forceFlush){\n      this.flush();\n    }\n  },\n\n  /**\n   * Flush any remaining events from the queue before it is removed\n   * @private\n   */\n  remove: function(){\n    this.flush();\n  }\n}\n\n\n\nmodule.exports = MapboxEventManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}