{"ast":null,"code":"const reducer = (state, action) => {\n  switch (action.type) {\n    case 'OPEN_LOGIN':\n      return {\n        ...state,\n        openLogin: true\n      };\n    case 'CLOSE_LOGIN':\n      return {\n        ...state,\n        openLogin: false\n      };\n    case 'START_LOADING':\n      return {\n        ...state,\n        loading: true\n      };\n    case 'END_LOADING':\n      return {\n        ...state,\n        loading: false\n      };\n    case 'UPDATE_ALERT':\n      return {\n        ...state,\n        alert: action.payload\n      };\n    case 'UPDATE_PROFILE':\n      return {\n        ...state,\n        profile: action.payload\n      };\n    case 'UPDATE_USER':\n      localStorage.setItem('currentUser', JSON.stringify(action.payload));\n      return {\n        ...state,\n        currentUser: action.payload\n      };\n    case 'UPDATE_IMAGES':\n      return {\n        ...state,\n        images: [...state.images, ...action.payload]\n      };\n    case 'DELETE_IMAGE':\n      return {\n        ...state,\n        images: state.images.filter(image => image !== action.payload)\n      };\n    case 'UPDATE_DETAILS':\n      return {\n        ...state,\n        details: {\n          ...state.details,\n          ...action.payload\n        }\n      };\n    case 'UPDATE_LOCATION':\n      return {\n        ...state,\n        location: action.payload\n      };\n    case 'UPDATE_UPDATED_ROOM':\n      return {\n        ...state,\n        updatedRoom: action.payload\n      };\n    case 'UPDATE_DELETED_IMAGES':\n      return {\n        ...state,\n        deletedImages: [...state.deletedImages, ...action.payload]\n      };\n    case 'UPDATE_ADDED_IMAGES':\n      return {\n        ...state,\n        addedImages: [...state.addedImages, ...action.payload]\n      };\n    case 'RESET_ROOM':\n      return {\n        ...state,\n        images: [],\n        details: {\n          title: '',\n          description: '',\n          price: 0\n        },\n        location: {\n          lng: 0,\n          lat: 0\n        },\n        updatedRoom: null,\n        deletedImages: [],\n        addedImages: []\n      };\n    case 'UPDATE_ROOMS':\n      return {\n        ...state,\n        rooms: action.payload,\n        addressFilter: null,\n        priceFilter: 50,\n        filteredRooms: action.payload\n      };\n    case 'FILTER_PRICE':\n      return {\n        ...state,\n        priceFilter: action.payload,\n        filteredRooms: applyFilter(state.rooms, state.addressFilter, action.payload)\n      };\n    case 'FILTER_ADDRESS':\n      return {\n        ...state,\n        addressFilter: action.payload,\n        filteredRooms: applyFilter(state.rooms, action.payload, state.priceFilter)\n      };\n    case 'CLEAR_ADDRESS':\n      return {\n        ...state,\n        addressFilter: null,\n        priceFilter: 50,\n        filteredRooms: state.rooms\n      };\n    case 'UPDATE_ROOM':\n      return {\n        ...state,\n        room: action.payload\n      };\n    case 'UPDATE_USERS':\n      return {\n        ...state,\n        users: action.payload\n      };\n    case 'DELETE_ROOM':\n      return {\n        ...state,\n        rooms: state.rooms.filter(room => room._id !== action.payload)\n      };\n    case 'UPDATE_SECTION':\n      return {\n        ...state,\n        section: action.payload\n      };\n    default:\n      throw new Error('No matched action!');\n  }\n};\nexport default reducer;\nconst applyFilter = (rooms, address, price) => {\n  let filteredRooms = rooms;\n  if (address) {\n    const {\n      lng,\n      lat\n    } = address;\n    filteredRooms = filteredRooms.filter(room => {\n      const lngDifference = Math.abs(lng - room.lng);\n      const latDifference = Math.abs(lat - room.lat);\n      return lngDifference <= 1 && latDifference <= 1;\n    });\n  }\n  if (price < 50) {\n    filteredRooms = filteredRooms.filter(room => room.price <= price);\n  }\n  return filteredRooms;\n};","map":{"version":3,"names":["reducer","state","action","type","openLogin","loading","alert","payload","profile","localStorage","setItem","JSON","stringify","currentUser","images","filter","image","details","location","updatedRoom","deletedImages","addedImages","title","description","price","lng","lat","rooms","addressFilter","priceFilter","filteredRooms","applyFilter","room","users","_id","section","Error","address","lngDifference","Math","abs","latDifference"],"sources":["C:/Users/shish/HostelProject/client/src/context/reducer.js"],"sourcesContent":["const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'OPEN_LOGIN':\r\n      return { ...state, openLogin: true };\r\n    case 'CLOSE_LOGIN':\r\n      return { ...state, openLogin: false };\r\n\r\n    case 'START_LOADING':\r\n      return { ...state, loading: true };\r\n    case 'END_LOADING':\r\n      return { ...state, loading: false };\r\n\r\n    case 'UPDATE_ALERT':\r\n      return { ...state, alert: action.payload };\r\n\r\n    case 'UPDATE_PROFILE':\r\n      return { ...state, profile: action.payload };\r\n\r\n    case 'UPDATE_USER':\r\n      localStorage.setItem('currentUser', JSON.stringify(action.payload));\r\n      return { ...state, currentUser: action.payload };\r\n\r\n    case 'UPDATE_IMAGES':\r\n      return { ...state, images: [...state.images, ...action.payload] };\r\n    case 'DELETE_IMAGE':\r\n      return {\r\n        ...state,\r\n        images: state.images.filter((image) => image !== action.payload),\r\n      };\r\n    case 'UPDATE_DETAILS':\r\n      return { ...state, details: { ...state.details, ...action.payload } };\r\n    case 'UPDATE_LOCATION':\r\n      return { ...state, location: action.payload };\r\n    case 'UPDATE_UPDATED_ROOM':\r\n      return { ...state, updatedRoom: action.payload };\r\n    case 'UPDATE_DELETED_IMAGES':\r\n      return {\r\n        ...state,\r\n        deletedImages: [...state.deletedImages, ...action.payload],\r\n      };\r\n    case 'UPDATE_ADDED_IMAGES':\r\n      return {\r\n        ...state,\r\n        addedImages: [...state.addedImages, ...action.payload],\r\n      };\r\n    case 'RESET_ROOM':\r\n      return {\r\n        ...state,\r\n        images: [],\r\n        details: { title: '', description: '', price: 0 },\r\n        location: { lng: 0, lat: 0 },\r\n        updatedRoom: null,\r\n        deletedImages: [],\r\n        addedImages: [],\r\n      };\r\n\r\n    case 'UPDATE_ROOMS':\r\n      return {\r\n        ...state,\r\n        rooms: action.payload,\r\n        addressFilter: null,\r\n        priceFilter: 50,\r\n        filteredRooms: action.payload,\r\n      };\r\n    case 'FILTER_PRICE':\r\n      return {\r\n        ...state,\r\n        priceFilter: action.payload,\r\n        filteredRooms: applyFilter(\r\n          state.rooms,\r\n          state.addressFilter,\r\n          action.payload\r\n        ),\r\n      };\r\n    case 'FILTER_ADDRESS':\r\n      return {\r\n        ...state,\r\n        addressFilter: action.payload,\r\n        filteredRooms: applyFilter(\r\n          state.rooms,\r\n          action.payload,\r\n          state.priceFilter\r\n        ),\r\n      };\r\n    case 'CLEAR_ADDRESS':\r\n      return {\r\n        ...state,\r\n        addressFilter: null,\r\n        priceFilter: 50,\r\n        filteredRooms: state.rooms,\r\n      };\r\n\r\n    case 'UPDATE_ROOM':\r\n      return { ...state, room: action.payload };\r\n\r\n    case 'UPDATE_USERS':\r\n      return { ...state, users: action.payload };\r\n    case 'DELETE_ROOM':\r\n      return {\r\n        ...state,\r\n        rooms: state.rooms.filter((room) => room._id !== action.payload),\r\n      };\r\n\r\n    case 'UPDATE_SECTION':\r\n      return { ...state, section: action.payload };\r\n\r\n    default:\r\n      throw new Error('No matched action!');\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\nconst applyFilter = (rooms, address, price) => {\r\n  let filteredRooms = rooms;\r\n  if (address) {\r\n    const { lng, lat } = address;\r\n    filteredRooms = filteredRooms.filter((room) => {\r\n      const lngDifference = Math.abs(lng - room.lng);\r\n      const latDifference = Math.abs(lat - room.lat);\r\n      return lngDifference <= 1 && latDifference <= 1;\r\n    });\r\n  }\r\n\r\n  if (price < 50) {\r\n    filteredRooms = filteredRooms.filter((room) => room.price <= price);\r\n  }\r\n\r\n  return filteredRooms;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}