{"ast":null,"code":"const fetchData = async (_ref, dispatch) => {\n  let {\n    url,\n    method = 'POST',\n    token = '',\n    body = null\n  } = _ref;\n  const headers = token ? {\n    'Content-Type': 'application/json',\n    authorization: `Bearer ${token}`\n  } : {\n    'Content-Type': 'application/json'\n  };\n  body = body ? {\n    body: JSON.stringify(body)\n  } : {};\n  try {\n    console.log(\"url: \", url);\n    const response = await fetch(url, {\n      method,\n      headers,\n      ...body\n    });\n    const data = await response.json();\n    if (!data.success) {\n      if (response.status === 401) dispatch({\n        type: 'UPDATE_USER',\n        payload: null\n      });\n      throw new Error(data.message);\n    }\n    return data.result;\n  } catch (error) {\n    dispatch({\n      type: 'UPDATE_ALERT',\n      payload: {\n        open: true,\n        severity: 'error',\n        message: error.message\n      }\n    });\n    console.log(error);\n    return null;\n  }\n};\nexport default fetchData;","map":{"version":3,"names":["fetchData","_ref","dispatch","url","method","token","body","headers","authorization","JSON","stringify","console","log","response","fetch","data","json","success","status","type","payload","Error","message","result","error","open","severity"],"sources":["C:/Users/shish/HostelProject/client/src/actions/utils/FetchData.js"],"sourcesContent":["\r\n\r\nconst fetchData = async (\r\n    { url, method = 'POST', token = '', body = null },\r\n    dispatch\r\n  ) => {\r\n    const headers = token\r\n      ? { 'Content-Type': 'application/json', authorization: `Bearer ${token}` }\r\n      : { 'Content-Type': 'application/json' };\r\n\r\n    body = body ? { body: JSON.stringify(body) } : {};\r\n\r\n    try {\r\n      console.log(\"url: \",url);\r\n      const response = await fetch(url, { method, headers, ...body });\r\n      const data = await response.json();\r\n      if (!data.success) {\r\n        if (response.status === 401)\r\n          dispatch({ type: 'UPDATE_USER', payload: null });\r\n        throw new Error(data.message);\r\n      }\r\n      return data.result;\r\n    } catch (error) {\r\n      dispatch({\r\n        type: 'UPDATE_ALERT',\r\n        payload: { open: true, severity: 'error', message: error.message },\r\n      });\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  export default fetchData;\r\n  "],"mappings":"AAEA,MAAMA,SAAS,GAAG,MAAAA,CAAAC,IAAA,EAEdC,QAAQ,KACL;EAAA,IAFH;IAAEC,GAAG;IAAEC,MAAM,GAAG,MAAM;IAAEC,KAAK,GAAG,EAAE;IAAEC,IAAI,GAAG;EAAK,CAAC,GAAAL,IAAA;EAGjD,MAAMM,OAAO,GAAGF,KAAK,GACjB;IAAE,cAAc,EAAE,kBAAkB;IAAEG,aAAa,EAAE,UAAUH,KAAK;EAAG,CAAC,GACxE;IAAE,cAAc,EAAE;EAAmB,CAAC;EAE1CC,IAAI,GAAGA,IAAI,GAAG;IAAEA,IAAI,EAAEG,IAAI,CAACC,SAAS,CAACJ,IAAI;EAAE,CAAC,GAAG,CAAC,CAAC;EAEjD,IAAI;IACFK,OAAO,CAACC,GAAG,CAAC,OAAO,EAACT,GAAG,CAAC;IACxB,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAACX,GAAG,EAAE;MAAEC,MAAM;MAAEG,OAAO;MAAE,GAAGD;IAAK,CAAC,CAAC;IAC/D,MAAMS,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,IAAI,CAACD,IAAI,CAACE,OAAO,EAAE;MACjB,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,EACzBhB,QAAQ,CAAC;QAAEiB,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAClD,MAAM,IAAIC,KAAK,CAACN,IAAI,CAACO,OAAO,CAAC;IAC/B;IACA,OAAOP,IAAI,CAACQ,MAAM;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdtB,QAAQ,CAAC;MACPiB,IAAI,EAAE,cAAc;MACpBC,OAAO,EAAE;QAAEK,IAAI,EAAE,IAAI;QAAEC,QAAQ,EAAE,OAAO;QAAEJ,OAAO,EAAEE,KAAK,CAACF;MAAQ;IACnE,CAAC,CAAC;IACFX,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC;IAClB,OAAO,IAAI;EACb;AACF,CAAC;AAED,eAAexB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}