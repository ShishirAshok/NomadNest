{"ast":null,"code":"// import fetchData from './utils/fetchData';\n// import { v4 as uuidv4 } from 'uuid';\n// import uploadFile from '../firebase/uploadFile';\n\n// const url = process.env.REACT_APP_SERVER_URL + '/user';\n\n// export const register = async (user, dispatch) => {\n//   dispatch({ type: 'START_LOADING' });\n\n//   const result = await fetchData(\n//     { url: url + '/register', body: user },\n//     dispatch\n//   );\n//   if (result) {\n//     dispatch({ type: 'UPDATE_USER', payload: result });\n//     dispatch({ type: 'CLOSE_LOGIN' });\n//     dispatch({\n//       type: 'UPDATE_ALERT',\n//       payload: {\n//         open: true,\n//         severity: 'success',\n//         message: 'Your account has been created successfully',\n//       },\n//     });\n//   }\n\n//   dispatch({ type: 'END_LOADING' });\n// };\n\n// export const login = async (user, dispatch) => {\n//   dispatch({ type: 'START_LOADING' });\n\n//   const result = await fetchData({ url: url + '/login', body: user }, dispatch);\n//   if (result) {\n//     dispatch({ type: 'UPDATE_USER', payload: result });\n//     dispatch({ type: 'CLOSE_LOGIN' });\n//   }\n\n//   dispatch({ type: 'END_LOADING' });\n// };\n\n// export const updateProfile = async (currentUser, updatedFields, dispatch) => {\n//   dispatch({ type: 'START_LOADING' });\n\n//   const { name, file } = updatedFields;\n//   let body = { name };\n//   try {\n//     if (file) {\n//       const imageName = uuidv4() + '.' + file?.name?.split('.')?.pop();\n//       const photoURL = await uploadFile(\n//         file,\n//         `profile/${currentUser?.id}/${imageName}`\n//       );\n//       body = { ...body, photoURL };\n//     }\n//     const result = await fetchData(\n//       {\n//         url: url + '/updateProfile',\n//         method: 'PATCH',\n//         body,\n//         token: currentUser.token,\n//       },\n//       dispatch\n//     );\n//     if (result) {\n//       dispatch({ type: 'UPDATE_USER', payload: { ...currentUser, ...result } });\n//       dispatch({\n//         type: 'UPDATE_ALERT',\n//         payload: {\n//           open: true,\n//           severity: 'success',\n//           message: 'Your profile has been updated successfully',\n//         },\n//       });\n//       dispatch({\n//         type: 'UPDATE_PROFILE',\n//         payload: { open: false, file: null, photoURL: result.photoURL },\n//       });\n//     }\n//   } catch (error) {\n//     dispatch({\n//       type: 'UPDATE_ALERT',\n//       payload: {\n//         open: true,\n//         severity: 'error',\n//         message: error.message,\n//       },\n//     });\n//     console.log(error);\n//   }\n\n//   dispatch({ type: 'END_LOADING' });\n// };\n\n// export const getUsers = async (dispatch, currentUser) => {\n//   const result = await fetchData(\n//     { url, method: 'GET', token: currentUser.token },\n//     dispatch\n//   );\n//   if (result) {\n//     dispatch({ type: 'UPDATE_USERS', payload: result });\n//   }\n// };\n\n// export const updateStatus = (updatedFields, userId, dispatch, currentUser) => {\n//   return fetchData(\n//     {\n//       url: `${url}/updateStatus/${userId}`,\n//       method: 'PATCH',\n//       token: currentUser.token,\n//       body: updatedFields,\n//     },\n//     dispatch\n//   );\n// };\n\n// export const logout = (dispatch) => {\n//   dispatch({ type: 'UPDATE_USER', payload: null });\n//   dispatch({ type: 'RESET_ROOM' });\n//   dispatch({ type: 'UPDATE_USERS', payload: [] });\n// };\n\nimport fetchData from './utils/fetchData';\nconst url = process.env.REACT_APP_SERVER_URL + '/user';\nexport const register = async (user, dispatch) => {\n  dispatch({\n    type: 'START_LOADING'\n  });\n  console.log(\"Loading\");\n  const result = await fetchData({\n    url: url + '/register',\n    body: user\n  }, dispatch);\n  console.log(result, 'result is found');\n  if (result) {\n    dispatch({\n      type: 'UPDATE_USER',\n      payload: result\n    });\n    dispatch({\n      type: 'CLOSE_LOGIN'\n    });\n    dispatch({\n      type: 'UPDATE_ALERT',\n      payload: {\n        open: true,\n        severity: 'success',\n        message: 'Your account has been created successfully'\n      }\n    });\n  }\n  dispatch({\n    type: 'END_LOADING'\n  });\n};","map":{"version":3,"names":["fetchData","url","process","env","REACT_APP_SERVER_URL","register","user","dispatch","type","console","log","result","body","payload","open","severity","message"],"sources":["C:/Users/shish/HostelProject/client/src/actions/Users.js"],"sourcesContent":["// import fetchData from './utils/fetchData';\r\n// import { v4 as uuidv4 } from 'uuid';\r\n// import uploadFile from '../firebase/uploadFile';\r\n\r\n// const url = process.env.REACT_APP_SERVER_URL + '/user';\r\n\r\n// export const register = async (user, dispatch) => {\r\n//   dispatch({ type: 'START_LOADING' });\r\n\r\n//   const result = await fetchData(\r\n//     { url: url + '/register', body: user },\r\n//     dispatch\r\n//   );\r\n//   if (result) {\r\n//     dispatch({ type: 'UPDATE_USER', payload: result });\r\n//     dispatch({ type: 'CLOSE_LOGIN' });\r\n//     dispatch({\r\n//       type: 'UPDATE_ALERT',\r\n//       payload: {\r\n//         open: true,\r\n//         severity: 'success',\r\n//         message: 'Your account has been created successfully',\r\n//       },\r\n//     });\r\n//   }\r\n\r\n//   dispatch({ type: 'END_LOADING' });\r\n// };\r\n\r\n// export const login = async (user, dispatch) => {\r\n//   dispatch({ type: 'START_LOADING' });\r\n\r\n//   const result = await fetchData({ url: url + '/login', body: user }, dispatch);\r\n//   if (result) {\r\n//     dispatch({ type: 'UPDATE_USER', payload: result });\r\n//     dispatch({ type: 'CLOSE_LOGIN' });\r\n//   }\r\n\r\n//   dispatch({ type: 'END_LOADING' });\r\n// };\r\n\r\n// export const updateProfile = async (currentUser, updatedFields, dispatch) => {\r\n//   dispatch({ type: 'START_LOADING' });\r\n\r\n//   const { name, file } = updatedFields;\r\n//   let body = { name };\r\n//   try {\r\n//     if (file) {\r\n//       const imageName = uuidv4() + '.' + file?.name?.split('.')?.pop();\r\n//       const photoURL = await uploadFile(\r\n//         file,\r\n//         `profile/${currentUser?.id}/${imageName}`\r\n//       );\r\n//       body = { ...body, photoURL };\r\n//     }\r\n//     const result = await fetchData(\r\n//       {\r\n//         url: url + '/updateProfile',\r\n//         method: 'PATCH',\r\n//         body,\r\n//         token: currentUser.token,\r\n//       },\r\n//       dispatch\r\n//     );\r\n//     if (result) {\r\n//       dispatch({ type: 'UPDATE_USER', payload: { ...currentUser, ...result } });\r\n//       dispatch({\r\n//         type: 'UPDATE_ALERT',\r\n//         payload: {\r\n//           open: true,\r\n//           severity: 'success',\r\n//           message: 'Your profile has been updated successfully',\r\n//         },\r\n//       });\r\n//       dispatch({\r\n//         type: 'UPDATE_PROFILE',\r\n//         payload: { open: false, file: null, photoURL: result.photoURL },\r\n//       });\r\n//     }\r\n//   } catch (error) {\r\n//     dispatch({\r\n//       type: 'UPDATE_ALERT',\r\n//       payload: {\r\n//         open: true,\r\n//         severity: 'error',\r\n//         message: error.message,\r\n//       },\r\n//     });\r\n//     console.log(error);\r\n//   }\r\n\r\n//   dispatch({ type: 'END_LOADING' });\r\n// };\r\n\r\n// export const getUsers = async (dispatch, currentUser) => {\r\n//   const result = await fetchData(\r\n//     { url, method: 'GET', token: currentUser.token },\r\n//     dispatch\r\n//   );\r\n//   if (result) {\r\n//     dispatch({ type: 'UPDATE_USERS', payload: result });\r\n//   }\r\n// };\r\n\r\n// export const updateStatus = (updatedFields, userId, dispatch, currentUser) => {\r\n//   return fetchData(\r\n//     {\r\n//       url: `${url}/updateStatus/${userId}`,\r\n//       method: 'PATCH',\r\n//       token: currentUser.token,\r\n//       body: updatedFields,\r\n//     },\r\n//     dispatch\r\n//   );\r\n// };\r\n\r\n// export const logout = (dispatch) => {\r\n//   dispatch({ type: 'UPDATE_USER', payload: null });\r\n//   dispatch({ type: 'RESET_ROOM' });\r\n//   dispatch({ type: 'UPDATE_USERS', payload: [] });\r\n// };\r\n\r\n\r\nimport fetchData from './utils/fetchData';\r\n\r\nconst url=process.env.REACT_APP_SERVER_URL+'/user'\r\n\r\nexport const register=async(user,dispatch)=>{\r\n    dispatch({type:'START_LOADING'})\r\n\r\n    console.log(\"Loading\");\r\n    const result = await fetchData(\r\n        { url: url + '/register', body: user },\r\n        dispatch\r\n      );\r\n      console.log(result,'result is found')\r\n      if (result) {\r\n        dispatch({ type: 'UPDATE_USER', payload: result });\r\n        dispatch({ type: 'CLOSE_LOGIN' });\r\n        dispatch({\r\n          type: 'UPDATE_ALERT',\r\n          payload: {\r\n            open: true,\r\n            severity: 'success',\r\n            message: 'Your account has been created successfully',\r\n          },\r\n        });\r\n      }\r\n    dispatch({type:'END_LOADING'})\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,SAAS,MAAM,mBAAmB;AAEzC,MAAMC,GAAG,GAACC,OAAO,CAACC,GAAG,CAACC,oBAAoB,GAAC,OAAO;AAElD,OAAO,MAAMC,QAAQ,GAAC,MAAAA,CAAMC,IAAI,EAACC,QAAQ,KAAG;EACxCA,QAAQ,CAAC;IAACC,IAAI,EAAC;EAAe,CAAC,CAAC;EAEhCC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtB,MAAMC,MAAM,GAAG,MAAMX,SAAS,CAC1B;IAAEC,GAAG,EAAEA,GAAG,GAAG,WAAW;IAAEW,IAAI,EAAEN;EAAK,CAAC,EACtCC,QACF,CAAC;EACDE,OAAO,CAACC,GAAG,CAACC,MAAM,EAAC,iBAAiB,CAAC;EACrC,IAAIA,MAAM,EAAE;IACVJ,QAAQ,CAAC;MAAEC,IAAI,EAAE,aAAa;MAAEK,OAAO,EAAEF;IAAO,CAAC,CAAC;IAClDJ,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAc,CAAC,CAAC;IACjCD,QAAQ,CAAC;MACPC,IAAI,EAAE,cAAc;MACpBK,OAAO,EAAE;QACPC,IAAI,EAAE,IAAI;QACVC,QAAQ,EAAE,SAAS;QACnBC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;EACFT,QAAQ,CAAC;IAACC,IAAI,EAAC;EAAa,CAAC,CAAC;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}